name: DevOpsCICD

on: [push]

jobs:
  build:
    runs-on: ubuntu-22.04
    if: github.ref == 'refs/heads/main' # we tell Github to only execute this step if we're on our development branch (so we don't put unfinished branches in production)
    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - uses: actions/checkout@v1
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm install # installs dependencies
      - run: npm test # runs tests
      - run: npm run lint # runs linting

        env:
          CI: true # shows terminal output!

  deployproduction:
    runs-on: ubuntu-22.04
    if: github.ref == 'refs/heads/main' # we tell Github to only execute this step if we're on our development branch (so we don't put unfinished branches in production)
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Deploy to AWS EC2
        env:
            PRIVATE_KEY: ${{ secrets.PASSWORD  }}
            HOSTNAME : '18.237.106.133'
            USER_NAME : ${{ secrets.USERNAME  }}
        run: |
          echo "$PRIVATE_KEY" > home/ubuntu/.ssh/authorized_keys
          chmod 600 home/ubuntu/.ssh/authorized_keys
          ssh -o "StrictHostKeyChecking=no" -i home/ubuntu/.ssh/authorized_keys ubuntu@18.237.106.133 "cd /home/ubuntu/production/devops && git stash && git pull && npm install && pm2 restart all"


      # - uses: actions/checkout@v2 
      # - name: Deploy in EC2
      #   env:
      #     PRIVATE_KEY: ${{ secrets.PASSWORD  }}
      #     HOSTNAME : '18.237.106.133'
      #     USER_NAME : ${{ secrets.USERNAME  }}
          
      #   run: |
      #     echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
      #     ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} '
        
      #      #Now we have got the access of EC2 and we will start the deploy .
      #       pwd
      #       cd production/devops # we move into our app's folder
      #       ls
      #       pwd # we print the working directory to check we're in the right place
      #       git stash
      #       sudo git pull # we pull any changes from git
      #       export NVM_DIR="$HOME/.nvm"
      #       [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
      #       npm prune # we remove any unused dependencies
      #       npm install # we install any missing dependencies
      #       #pm2 reload all # we reload the app via PM2

            